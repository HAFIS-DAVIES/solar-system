name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URL: mongodb+srv://supercluster.d83jj.mongodb.net/superData
  MOBGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test 

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: test-results
            path:  test-results.xml
    docker:
        name: Docker Build
        needs: [unit-testing]
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20
    
        - name: Install Dependencies
          run: npm install

        - name: Build Docker Image
          run: docker build -t solar-system .
    
        - name: Push Docker Image
          run: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker tag solar-system ${{ secrets.DOCKER_USERNAME }}/solar-system
            docker push ${{ secrets.DOCKER_USERNAME }}/solar-system

    # deploy:
    #     name: Deploy to EC2
    #     runs-on: ubuntu-latest
    #     needs: [docker]
    #     steps:
    #       - name: Checkout Repository
    #         uses: actions/checkout@v4
    
    #       - name: SSH into EC2 and Deploy
    #         uses: appleboy/ssh-action@v0.1.10
    #         with:
    #           host: ${{ secrets.EC2_HOST }}
    #           username: ec2-user
    #           key: ${{ secrets.EC2_SSH_KEY }}
    #           script: |
    #             docker stop solar-system || true
    #             docker rm solar-system || true
    #             docker pull ${{ secrets.DOCKER_USERNAME }}/solar-system
    #             docker run -d -p 8080:3000 --name solar-system ${{ secrets.DOCKER_USERNAME }}/solar-system


    deploy:
      name: Deploy to EC2
      runs-on: ubuntu-latest
      needs: [docker]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Deploy to EC2
          uses: appleboy/ssh-action@v0.1.10
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ec2-user
            key: ${{ secrets.EC2_SSH_KEY }}
            script_stop: true  # Stop script execution when an error occurs
            script: |
              # Verify DNS and connectivity
              echo "=== Testing network connectivity ==="
              if ! ping -c 1 docker.io; then
                echo "ERROR: Cannot ping docker.io - check network connectivity"
                exit 1
              fi
              
              if ! nslookup docker.io; then
                echo "ERROR: DNS resolution failed for docker.io"
                exit 1
              fi
              
              # Print Docker info for diagnostics
              echo "=== Docker Info ==="
              docker info
              
              # Log in to Docker Hub (if needed)
              echo "=== Logging into Docker Hub ==="
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
              
              # Stop and remove existing container
              echo "=== Cleaning up existing containers ==="
              docker stop solar-system || echo "No container to stop"
              docker rm solar-system || echo "No container to remove"
              
              # Pull the latest image with full URL
              echo "=== Pulling latest image ==="
              docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/solar-system:latest
              
              # Run the container
              echo "=== Starting container ==="
              docker run -d -p 8080:3000 --name solar-system --restart unless-stopped docker.io/${{ secrets.DOCKER_USERNAME }}/solar-system:latest
              
              # Verify container is running
              echo "=== Verifying deployment ==="
              if ! docker ps | grep solar-system; then
                echo "ERROR: Container failed to start"
                docker logs solar-system
                exit 1
              fi
              
              echo "=== Deployment successful ==="