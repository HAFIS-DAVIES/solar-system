name: Solar System Workflow

# difference between continue-on-error and if failure() is that continue-on-error will providfe a pass on the job summary

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
    
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        strategy:
          matrix:
            nodejs_version: [18, 20]
            operating_system: [ubuntu-latest]
            exclude:
              - nodejs_version: 18
                operating_system: macos-latest

        runs-on: ${{ matrix.operating_system }}
        steps:

        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

            # Caching the package-lock.json so that for subsequence workflows, we do not need to reinstall the packages. npm install will run faster
        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test

# can access the artifact on github actions summary page
        # - name: Archive Test Result

          # if success()  - by default all steps status check is success() unless stated
          # if failure() - will run if previous step fails
          # if always() - will always run regardless if previous step fails/pass

          # if always()
          # uses: actions/upload-artifact@v4
          # with:
          #   name: Mocha-Test-Result
          #   path: test-results.xml

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup Node.js Version - 18
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install

        - name: Check Code Coverage
          continue-on-error: true  # can be used to continue with the other jobs / steps (depending on which level) even when it fails 
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5


    docker:
      name: Containerization
      needs: [code-coverage, unit-testing]
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # This GITHUB TOKEN is automatically created and part of secrets during workflow jobs. By default has READ permissions

      - name: Docker Build For Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: | 
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/hongming200/solar-system:${{ github.sha }}