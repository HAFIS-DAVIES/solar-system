name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env: 
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env: 
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            node-version: [18,19,20]
            os: [ubuntu-latest]
            exclude:
              - os: macos-latest, ubuntu-latest
                node-version: 18,19
        runs-on: ${{ matrix.os }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}
    
        - name: Install Dependencies
          run: npm ci

        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
            

        - name: Unit Testing of Solar System
          id: nodejs-unit-test-step
          run: npm test
        
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: solarapp-test-results--${{ matrix.os }}-${{ matrix.node-version }}-${{ github.run_id }}
            path: test-results.xml
            retention-days: 1
            overwrite: true

    CodeCoverage:
      name: Code Coverage
      container:
        image: node:20
      services:
        mongodb:
          image: siddharth67/mongo-db:non-prod
          options:
            --name mongo

      env: 
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password
      strategy:
        matrix:
          os: [ubuntu-latest]
          node-version: [18,19,20]
      runs-on: ${{ matrix.os }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: ${{ matrix.node-version }}

        - name: Install Dependencies
          run: npm ci

        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Coverage Report
          uses: actions/upload-artifact@v4
          with:
            name: solarapp-coverage-report-${{ github.run_id }}-${{ matrix.node-version }}-${{ matrix.os }}
            path: coverage
            retention-days: 1
            overwrite: true

    DockerAuthentication:
      name: Docker Authentication
      needs: [CodeCoverage , unit-testing]
      runs-on: ubuntu-latest
      steps:
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Verify login
          run: |
            echo "Docker info:"
            docker info | grep Username || true
            echo "Docker Hub credentials:"
            cat ~/.docker/config.json || true  

    DockerBuild:
      name: Build and Push to Docker Hub
      runs-on: ubuntu-latest
      needs: DockerAuthentication
      permissions:
        contents: read
        packages: write
      steps:
        - uses: actions/checkout@v4

        # Clean up any cached Docker auth
        - name: Reset Docker config
          run: rm -f ~/.docker/config.json || true

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Login to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Verify login
          run: |
            echo "Expect Username: ${{ vars.DOCKERHUB_USERNAME }}"
            docker info | grep Username || true
            echo "Auth file content:"
            cat ~/.docker/config.json

        - name: Build and Push image
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./Dockerfile
            push: false
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/hafis-davies/solar-system:latest
              ghcr.io/hafis-davies/solar-system:${{ github.sha }}
        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest

            export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo "Container IP Address: $IP"

            # Test the application endpoint
            echo "Testing the Health Endpoint..."
            wget -q -O - 127.0.0.1:3000/live | grep live
            echo "Health Endpoints is Working."

        - name: Docker Push
          run: |
            docker push ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
            docker push ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            docker push ghcr.io/hafis-davies/solar-system:latest
            docker push ghcr.io/hafis-davies/solar-system:${{ github.sha }}

    kind-test:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name solar-system --wait 60s
          kubectl get nodes

    Dev-Deployment:
      name: Dev Deployment
      needs: DockerBuild
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name solar-system --wait 60s
          kubectl get nodes

      - name: Save Nginx Ingress Controller IP
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
     
      - name: Replace variables in files
        uses: datamonsters/replace-action@v2
        with:
          files: |
            kubernetes/development/*.yaml
          env: |
            NAMESPACE: ${{ vars.NAMESPACE_DEV }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: '${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest'
            INGRESS_IP: ${{ env.INGRESS_IP }}

      - name: Check files
        run: |
          cat kubernetes/development/*.yaml

      - name: Create MongoDB Secret
        run: |
          kubectl get ns development || kubectl create ns development
          kubectl -n ${{ vars.NAMESPACE_DEV }} create secret generic mongo-secret \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Dev Env
        run: |
          kubectl apply -f kubernetes/development/
          kubectl get all -n ${{ vars.NAMESPACE_DEV }}
          kubectl -n ${{ vars.NAMESPACE_DEV }} rollout status deployment/solar-system-deployment
          echo "Waiting for 60 seconds to allow the application to stabilize..."
          sleep 60
          echo "Testing the Health Endpoint..."
          wget -q -O - http://$INGRESS_IP/live | grep live
          echo "Health Endpoints is Working."