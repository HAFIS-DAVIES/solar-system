name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env: 
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        strategy:
          matrix:
            node-version: [18,19,20]
            os: [ubuntu-latest]
            exclude:
              - os: macos-latest, ubuntu-latest
                node-version: 18,19
        runs-on: ${{ matrix.os }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}
    
        - name: Install Dependencies
          run: npm ci

        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
            

        - name: Unit Testing of Solar System
          id: nodejs-unit-test-step
          run: npm test
          
        # - name: Archive Test Result
        #   uses: actions/upload-artifact@v3
        #   with:
        #     name: Mocha-Test-Result
        #     path: test-results.xml
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: solarapp-test-results-${{ github.run_id }}-${{ matrix.os }}
            path: test-results.xml
            retention-days: 1

    CodeCoverage:
      name: Code Coverage
      needs: [unit-testing]
      strategy:
        matrix:
          os: [ubuntu-latest]
          node-version: [18,19,20]
      runs-on: ${{ matrix.os }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}

        - name: Install Dependencies
          run: npm ci

        - name: Cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Coverage Report
          uses: actions/upload-artifact@v4
          with:
            name: solarapp-coverage-report-${{ github.run_id }}-${{ matrix.os }}
            path: coverage
            retention-days: 1
            overwrite: true

    DockerAuthentication:
      name: Docker Authentication
      needs: [CodeCoverage]
      runs-on: ubuntu-latest
      steps:
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

    DockerBuild:
      name: Docker Build and Test
      needs: [DockerAuthentication]
      runs-on: ubuntu-latest
      steps:
        - name: Build Docker Image
          uses: docker/build-push-action@v6
          with:
            context: .
            push: false
            tags: hafiszaman/solar-system:${{ github.sha }}

        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              hafiszaman/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo "Container IP Address: $IP"
            sleep 15
            # Test the application endpoint
            echo Testing the Health Endpoint...
            wget -q -O - $IP:3000/live | grep "I am alive"
            echo Health Endpoint is Working.