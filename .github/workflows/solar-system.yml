name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: ${{vars.MONGO_URI}}
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
  
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: mongodb://localhost:27017/superData
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
              
            
        strategy:
          matrix:
            node-version: [20, 18, 19]
            operating-system: [ubuntu-latest]
            exclude:
              - node-version: 18
                operating-system: macos-latest
            
        runs-on: ${{ matrix.operating-system }}
        steps:

        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version -${{ matrix.node-version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}

        - name: chaching the dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result${{matrix.node-version}}-${{ matrix.operating-system }}
            path: test-results.xml
            retention-days: 5  #store the artifact for 5 days

    code-coverage:
          name: code coverage
          runs-on: ubuntu-latest
          services:
            mongo-db:
              image: siddharth67/mongo-db:non-prod
              options: 
                --name mongo
              
          env:
              MONGO_URI: mongodb://mongo:27017/superData
              MONGO_USERNAME: non-prod-user
              MONGO_PASSWORD: non-prod-password

          container: 
            image: node:18
          steps:

          - name: Checkout Repository
            uses: actions/checkout@v4

          # - name: Setup NodeJS Version 
          #   uses: actions/setup-node@v3
          #   with:
          #     node-version: 18
          
          - name: chaching the dependencies
            uses: actions/cache@v4
            with:
              path: node_modules
              key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

          - name: Install Dependencies
            run: npm install
      
          - name: Unit Testing
            continue-on-error: true
            run: npm run coverage

            
          - name: Archive Test Result
            uses: actions/upload-artifact@v4
            with:
              name: code coverage results
              path: coverage
              retention-days: 5  #store the artifact for 5 days 

    docker:

      name: Docker Build and Push
      runs-on: ubuntu-latest
      needs: [unit-testing, code-coverage]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: docker login
          uses: docker/login-action@v2
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        - name: dhcr login
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Build Docker Image
          uses: docker/build-push-action@v4
          with:
            context: .
            file: Dockerfile
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: test docker image
          run: |
            docker images 
            docker run -d --name solar-system -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system)
            echo "IP: $IP"

            echo "testing image using wget"
            wget -q -O - 127.0.0.1:3000/live | grep live 

        - name: Set lowercase repo owner
          id: lower_repo
          run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
       
        - name: push to github registry 
          uses: docker/build-push-action@v4
          with:
            context: .
            file: Dockerfile
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ steps.lower_repo.outputs.owner }}/solar-system:${{ github.sha }}



    dev-deploy:
      name: Deploy to Development Environment
      runs-on: ubuntu-latest
      needs: [docker]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: install kubectl cli
          uses: azure/setup-kubectl@v1
          with:
            version: 'latest'
        
        - name: fetch kubernetes cluster details
          run: |
            kubectl version --short 
            echo -----------------------------------
            kubectl get nodes
        

          