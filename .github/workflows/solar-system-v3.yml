# name: Solar System Workflow

# on: 
#   workflow_dispatch:
#   push:
#     branches:
#       - main

# env:
#   MONGO_URL: mongodb+srv://supercluster.d83jj.mongodb.net/superData
#   MOBGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
#   MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
#   AWS_REGION: us-east-1

# permissions:
#   id-token: write   # This is required for requesting the JWT
#   contents: read    # This is required for actions/checkout

# jobs:
#   unit-testing:
#     name: Unit Testing
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v4

#     - name: Setup NodeJS Version
#       uses: actions/setup-node@v3
#       with:
#         node-version: 20
    
#     - name: Install Dependencies
#       run: npm install
    
#     - name: Unit Testing
#       run: npm test 

#     - name: Archive Test Result
#       uses: actions/upload-artifact@v4
#       with:
#         name: test-results
#         path: test-results.xml

#   docker-ecr:
#     name: Docker Build and Push to ECR
#     needs: [unit-testing]
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}
#         mask-aws-account-id: true

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2
#       with:
#         mask-password: true

#     - name: Setup NodeJS Version
#       uses: actions/setup-node@v3
#       with:
#         node-version: 20
    
#     - name: Install Dependencies
#       run: npm install

#     - name: Build, tag, and push image to Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: solar-system
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#   deploy-ec2:
#     name: Deploy to EC2
#     runs-on: ubuntu-latest
#     needs: [docker-ecr]
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
      
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}
#           mask-aws-account-id: true
      
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2
#         with:
#           mask-password: true
      
#       - name: SSH into EC2 and Deploy
#         uses: appleboy/ssh-action@v0.1.10
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ec2-user
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             # Check if Docker is installed, install if not
#             if ! command -v docker &> /dev/null; then
#               echo "Docker not found, installing..."
#               sudo yum update -y
#               sudo yum install -y docker
#               sudo systemctl start docker
#               sudo systemctl enable docker
#               sudo usermod -aG docker ec2-user
#               echo "Docker installed successfully"
#             else
#               echo "Docker is already installed"
#             fi
            
#             # Setup AWS CLI if not already installed
#             if ! command -v aws &> /dev/null; then
#               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#               unzip awscliv2.zip
#               sudo ./aws/install
#             fi
            
#             # Configure AWS CLI with instance credentials
#             export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
#             export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
#             export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            
#             # Login to ECR with credentials masking
#             aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
#             # Stop and remove existing container if it exists
#             docker stop solar-system || true
#             docker rm solar-system || true
            
#             # Pull latest image from ECR
#             docker pull ${{ steps.login-ecr.outputs.registry }}/solar-system:latest
            
#             # Run new container
#             docker run -d -p 8080:3000 \
#               -e MONGO_URL="${{ env.MONGO_URL }}" \
#               -e MONGO_USERNAME="${{ secrets.MONGO_USERNAME }}" \
#               -e MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
#               --name solar-system ${{ steps.login-ecr.outputs.registry }}/solar-system:latest



name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main

env:
  MONGO_URL: mongodb+srv://supercluster.d83jj.mongodb.net/superData
  MOBGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  AWS_REGION: us-east-1

permissions:
  id-token: write   
  contents: read    
jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup NodeJS Version
      uses: actions/setup-node@v3
      with:
        node-version: 20
    
    - name: Install Dependencies
      run: npm install
    
    - name: Unit Testing
      run: npm test 

    - name: Archive Test Result
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results.xml

  docker-ecr:
    name: Docker Build and Push to ECR
    needs: [unit-testing]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: true

    - name: Setup NodeJS Version
      uses: actions/setup-node@v3
      with:
        node-version: 20
    
    - name: Install Dependencies
      run: npm install

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: solar-system
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [docker-ecr]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
      
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              echo "Docker installed successfully"
            else
              echo "Docker is already installed"
            fi
            
            # Make sure Docker service is running
            sudo systemctl status docker || sudo systemctl start docker
            
            # Setup AWS CLI if not already installed
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi
            
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
            
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
      
            sudo docker stop solar-system || true
            sudo docker rm solar-system || true
            
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/solar-system:latest
          
            sudo docker run -d -p 8080:3000 \
              -e MONGO_URL="${{ env.MONGO_URL }}" \
              -e MONGO_USERNAME="${{ secrets.MONGO_USERNAME }}" \
              -e MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
              --name solar-system ${{ steps.login-ecr.outputs.registry }}/solar-system:latest
            
            
            sudo docker ps | grep solar-system || echo "Container failed to start"