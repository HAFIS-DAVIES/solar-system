name: Solar System Workflow

on: 
    workflow_dispatch:
    push:
      branches:
        - main
        - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
    MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}

jobs:
   unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
      MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
    strategy: 
        matrix: 
            nodejs_version: [ 18, 20 ]
            operating_system: [ubuntu-latest]
    runs-on: ${{matrix.operating_system}}
    steps:
        - name: Checkout Reposistory
          uses: actions/checkout@v4
        
        - name: Setup NodeJS version - ${{matrix.nodejs_version}}
          uses: actions/setup-node@v4
          with: 
            node-version: ${{matrix.nodejs_version}}
        
        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with: 
            path: node_modules
            key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          id: nodejs-testing-step
          run: npm test

        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: output-${{matrix.operating_system}}-${{matrix.nodejs_version}}
            path: test-results.xml

   code-coverage:
    name: Code Coverage
    container:
      image: node:20
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongo
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
      MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
    runs-on: ubuntu-latest
    steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Setup NodeJS version -18
          uses: actions/setup-node@v4
          with:
            node-version: 20

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with: 
            path: node_modules
            key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

        
        - name: Install Dependencies
          run: npm install

        - name: Check code coverage
          run: npm run coverage
          continue-on-error: true

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

   reports-s3:
    needs: [code-coverage, unit-testing]
    name: AWS - S3 Upload Reports
    strategy: 
        matrix: 
            nodejs_version: [ 18, 20 ]
            operating_system: [ubuntu-latest]
    runs-on: ${{matrix.operating_system}}
    continue-on-error: true
    steps:
      - name: Download Test Artifact
        uses: actions/download-artifact@v4
        with: 
          name: output-${{matrix.operating_system}}-${{matrix.nodejs_version}}
      
      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v4
        with: 
          name: Code-Coverage-Result
        
      - name: Merge Test Files
        run: | 
          ls -ltr
          mkdir reports-${{github.sha}}
          mv cobertura-coverage.xml reports-${{github.sha}}/
          mv test-results.xml reports-${{github.sha}}/
          ls -ltr reports-${{github.sha}}/

      - name: Upload to AWS S3
        run: echo "Uploading....."
  
   docker: 
    name: Containerization
    permissions: 
      packages: write
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo 
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{vars.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: GHCR Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GITHUB_TOKEN}} 

      - name: Docker Build
        uses: docker/build-push-action@v6
        with: 
          context: .
          push: false
          tags: ${{vars.DOCKER_USERNAME}}/solar-system:${{github.sha}}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{vars.DOCKER_USERNAME}}/solar-system:${{github.sha}}

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live
      
      - name: Container Registry Push
        uses: docker/build-push-action@v6
        with: 
          context: .
          push: true
          tags: | 
            ${{vars.DOCKER_USERNAME}}/solar-system:${{github.sha}}
            ghcr.io/${{github.repository_owner}}/solar-system:${{github.sha}}

   dev-deploy:
    needs: docker
    if: contains(github.ref, 'feature/')
    uses: tobi-willy/solar-system/.github/workflows/reuse-deployment.yaml@feature/exploring-workflow
    secrets:
      gcp-auth: ${{secrets.GCP_SA_KEY}}
      k8s-kubeconfig: ${{secrets.KUBECONFIG}}
      mongodb-password: ${{ secrets.MONGO_PASSWORD}}
    with:
      mongodb-uri: ${{vars.MONGO_URI}}
      environment: development
      k8s-manifest-uri: kubernetes/development/
 

   dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL output CURL and JQ
          env: 
            URL: ${{needs.dev-deploy.outputs.application-uri}}
          run: |
            echo $URL
            echo "----------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live
      
   prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: tobi-willy/solar-system/.github/workflows/reuse-deployment.yaml@feature/exploring-workflow
    secrets:
      gcp-auth: ${{secrets.GCP_SA_KEY}}
      k8s-kubeconfig: ${{secrets.KUBECONFIG}}
      mongodb-password: ${{ secrets.MONGO_PASSWORD}}
    with:
      mongodb-uri: ${{vars.MONGO_URI}}
      environment: production
      k8s-manifest-uri: kubernetes/production/

   prod-integration-testing:
      name: Prod Integration Testing
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL output CURL and JQ
          env: 
            URL: ${{needs.prod-deploy.outputs.application-uri}}
          run: |
            echo $URL
            echo "--------------------"
            curl https://$URL/live -s -k | grep -iq live
      